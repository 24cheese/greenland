import './gallery.css';
import React, { useState, useMemo } from 'react';
import Layout from '../../layouts/Layout';
import { useTranslation } from 'react-i18next';
import { useFetchData } from '../../hooks/useFetchData'; // Import hook chung
import { fetchAllAnimals } from '../../api/animalApi';   // Import h√†m API
import { Animal } from '../../types/animal';           // Import ki·ªÉu d·ªØ li·ªáu

function Gallery() {
  const { t } = useTranslation();

  // B∆∞·ªõc 1: G·ªçi hook chung ƒë·ªÉ l·∫•y d·ªØ li·ªáu, tr·∫°ng th√°i loading v√† l·ªói
  const { data: animals, loading, error } = useFetchData<Animal>(fetchAllAnimals);

  // C√°c state cho vi·ªác filter v√† pagination v·∫´n gi·ªØ l·∫°i ·ªü component
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 20;
  const [selectedLevel, setSelectedLevel] = useState('');
  const [searchTerm, setSearchTerm] = useState('');

  // B∆∞·ªõc 2: T·ªëi ∆∞u h√≥a vi·ªác filter b·∫±ng useMemo
  // Logic filter ch·ªâ ch·∫°y l·∫°i khi danh s√°ch animals, selectedLevel ho·∫∑c searchTerm thay ƒë·ªïi
  const filteredAnimals = useMemo(() => {
    return animals.filter(animal => {
      const matchesLevel = selectedLevel ? animal.red_level === selectedLevel : true;
      const matchesSearch = animal.name.toLowerCase().includes(searchTerm.toLowerCase());
      return matchesLevel && matchesSearch;
    });
  }, [animals, selectedLevel, searchTerm]);


  const handlePageChange = (page: number) => setCurrentPage(page);

  // T√≠nh to√°n ph√¢n trang d·ª±a tr√™n d·ªØ li·ªáu ƒë√£ filter
  const totalPages = Math.ceil(filteredAnimals.length / itemsPerPage);
  const currentAnimals = filteredAnimals.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  // B∆∞·ªõc 3: X·ª≠ l√Ω c√°c tr·∫°ng th√°i giao di·ªán (UI states)
  const renderContent = () => {
    if (loading) {
      return <p className="loading-message">ƒêang t·∫£i th∆∞ vi·ªán...</p>;
    }

    if (error) {
      return <p className="error-message">Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.</p>;
    }

    if (currentAnimals.length === 0) {
      return <p className="no-results-message">Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o.</p>;
    }

    return (
      <>
        <div className="gallery pt-2">
          {currentAnimals.map((animal) => (
            <div className="gallery__item gallery__item--1" key={animal.id}>
              <a href={animal.link} className="gallery__link" target='_blank' rel="noreferrer">
                <img src={animal.image_url} className="gallery__image" alt={animal.name} />
                <div className="gallery__overlay">
                  <span>
                    {animal.name}
                    {animal.red_list ? ` üî¥ (${animal.red_level})` : ''}
                  </span>
                </div>
              </a>
            </div>
          ))}
        </div>

        <div className="pagination">
          {totalPages > 1 && Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
            <button
              key={page}
              className={`page-button ${page === currentPage ? 'active' : ''}`}
              onClick={() => handlePageChange(page)}
            >
              {page}
            </button>
          ))}
        </div>
      </>
    );
  };


  return (
    <Layout>
      <section className="animals-gallery">
        <hr className="threats-line" />
        <h2 className="gallery-header">
          {t('animals')} <span className="text-success fw-lighter">{t('Gallery')}</span>
        </h2>
        
        <div className="search-container">
          <input
            type="text"
            placeholder="T√¨m ki·∫øm theo t√™n ƒë·ªông v·∫≠t..."
            value={searchTerm}
            onChange={(e) => {
              setSearchTerm(e.target.value);
              setCurrentPage(1); // Quay v·ªÅ trang ƒë·∫ßu khi search
            }}
          />
        </div>

        <div className="filter-container">
          <label htmlFor="filter">L·ªçc theo m·ª©c ƒë·ªô:</label>
          <select
            id="filter"
            value={selectedLevel}
            onChange={(e) => {
              setSelectedLevel(e.target.value);
              setCurrentPage(1); // Quay v·ªÅ trang ƒë·∫ßu khi filter
            }}
          >
            <option value="">T·∫•t c·∫£</option>
            <option value="EN">Nguy c·∫•p (EN)</option>
            <option value="VU">S·∫Øp nguy c·∫•p (VU)</option>
            <option value="R">Hi·∫øm (R)</option>
            <option value="T">B·ªã ƒëe d·ªça (T)</option>
            <option value="NT">S·∫Øp b·ªã ƒëe d·ªça (NT)</option>
          </select>
        </div>

        {renderContent()}

      </section>
    </Layout>
  );
}

export default Gallery;